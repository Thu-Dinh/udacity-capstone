# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  build-and-push:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python3 test_with_pytest.py
      - setup_remote_docker
      - run:
          name: Build and push Docker image
          command: |
            . venv/bin/activate
            pyinstaller -F app.py
            docker build -t $DOCKER_LOGIN/capstone:v1.0.0 .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/capstone:v1.0.0

  deploy-eks:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/create-cluster:
          cluster-name: eks-capstone
          nodegroup-name: eks-capstone-nodes
          node-type: t3.medium
          nodes-min: 2
          nodes-max: 3

  deploy-application:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: eks-capstone
          install-kubectl: true
      - run:
          name: Test kubectl
          command: |
            kubectl get services
            kubectl get nodes
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ".circleci/files/deployment.yml"
          resource-name: deployment/capstone
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ".circleci/files/service.yml"
          show-kubectl-command: true
      - run:
          name: get deployment status
          command: kubectl get svc capstone

workflows:
  deployment:
    jobs:
      - build-and-push
      - deploy-eks:
          requires: [build-and-push]
      - deploy-application:
          requires: [deploy-eks]