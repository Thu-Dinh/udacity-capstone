version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  run-lint-and-test:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python3 test_with_pytest.py

  build-and-push:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - run:
          name: Build and push Docker image
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            docker build -t $DOCKER_LOGIN/capstone:v2.0.0 .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/capstone:v2.0.0

  create-eks-cluster:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/create-cluster:
          cluster-name: capstone
          node-type: t2.small
          nodes-min: 1
          nodes-max: 3

  create-deployment:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ".circleci/files/deployment.yml"
          resource-name: deployment/capstone
          show-kubectl-command: true

  create-service:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ".circleci/files/service.yml"
          resource-name: service/capstone
          show-kubectl-command: true

  update-container-image:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - aws-eks/update-container-image:
          cluster-name: capstone
          container-image-updates: 'capstone=docker20190329/capstone:v2.0.0'
          record: true
          resource-name: deployment/capstone

  smoke-test:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - run:
          name: Test Load Balencer endpoint
          command: |
            sleep 30
            EXTERNAL_IP=$(kubectl get service capstone | awk '{print $4}' | tail -n1)
            echo "${EXTERNAL_IP}"
            if curl --insecure --silent --retry 10 http://${EXTERNAL_IP}:5000 | grep "Hello World v2.0.0!"
            then
              exit 0
            else
              exit 1
            fi

workflows:
  deployment:
    jobs:
      - run-lint-and-test
      - build-and-push:
          requires: [run-lint-and-test]
      - create-eks-cluster:
          requires: [build-and-push]
      - create-service:
          requires: [create-eks-cluster]
      - create-deployment:
          requires: [create-service]
      - aws-eks/update-container-image:
          cluster-name: capstone
          container-image-updates: 'capstone=docker20190329/capstone:v2.0.0'
          record: true
          requires: [create-deployment]
          resource-name: deployment/capstone
      - smoke-test:
          requires: [aws-eks/update-container-image]